'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _xstate = require('xstate');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var withStatechart = function withStatechart(statechart) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (Component) {
    var StateMachine = function (_React$Component) {
      _inherits(StateMachine, _React$Component);

      function StateMachine(props) {
        _classCallCheck(this, StateMachine);

        var _this = _possibleConstructorReturn(this, (StateMachine.__proto__ || Object.getPrototypeOf(StateMachine)).call(this, props));

        _this.machine = (0, _xstate.Machine)(statechart);
        _this.state = {
          actions: null,
          componentState: options.initialData,
          machineState: _this.machine.initialState.toString()
        };

        _this.handleRef = function (element) {
          _this.instance = element;
        };

        _this.handleTransition = function (event, updater) {
          if (_this.instance && _this.instance.componentWillTransition) {
            _this.instance.componentWillTransition(event);
          }

          _this.setState(function (prevState) {
            var stateChange = typeof updater === 'function' ? updater(prevState.componentState) : updater;
            var nextState = _this.machine.transition(prevState.machineState, event, stateChange);

            return {
              actions: nextState.actions,
              componentState: _extends({}, prevState.componentState, stateChange),
              event: event,
              machineState: nextState.toString()
            };
          });
        };

        _this.handleRef = (0, _utils.isStateless)(Component) ? null : _this.handleRef;
        return _this;
      }

      _createClass(StateMachine, [{
        key: 'getChildContext',
        value: function getChildContext() {
          return {
            actions: this.state.actions,
            machineState: this.state.machineState
          };
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          var _this2 = this;

          if (options.devTools && window.__REDUX_DEVTOOLS_EXTENSION__) {
            this.devTools = window.__REDUX_DEVTOOLS_EXTENSION__.connect({
              name: (0, _utils.getComponentName)(Component)
            });
            this.devTools.init(this.state);

            this.unsubscribe = this.devTools.subscribe(function (message) {
              if (message.type === 'DISPATCH' && message.payload.type === 'JUMP_TO_ACTION') {
                _this2.jumpToAction = true;
                _this2.setState(JSON.parse(message.state));
              }
            });
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this.unsubscribe) {
            this.unsubscribe();
          }

          if (window.__REDUX_DEVTOOLS_EXTENSION__) {
            window.__REDUX_DEVTOOLS_EXTENSION__.disconnect();
          }
        }
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
          if (!this.jumpToAction) {
            this.handleComponentDidUpdate(prevProps, prevState);
          } else {
            this.jumpToAction = false;
          }
        }
      }, {
        key: 'handleComponentDidUpdate',
        value: function handleComponentDidUpdate(prevProps, prevState) {
          var _this3 = this;

          if (prevState.actions !== this.state.actions && this.instance) {
            this.state.actions.forEach(function (action) {
              if (_this3.instance[action]) {
                _this3.instance[action]();
              }
            });
          }

          if (prevState.machineState !== this.state.machineState) {
            if (this.instance && this.instance.componentDidTransition) {
              this.instance.componentDidTransition(prevState.machineState, this.state.event);
            }

            if (this.devTools) {
              this.devTools.send(this.state.event, this.state);
            }
          }
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(Component, _extends({}, this.props, this.state.componentState, {
            machineState: this.state.machineState,
            ref: this.handleRef,
            transition: this.handleTransition
          }));
        }
      }]);

      return StateMachine;
    }(_react2.default.Component);

    StateMachine.childContextTypes = {
      actions: _propTypes2.default.arrayOf(_propTypes2.default.string),
      machineState: _propTypes2.default.string
    };

    return StateMachine;
  };
};

exports.default = withStatechart;
{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nimport { getEventType, toStatePath, toStateValue, mapValues, path, toStatePaths, pathsToStateValue, pathToStateValue, getActionType, flatMap, mapFilterValues, nestedPath } from './utils';\nimport { matchesState } from './matchesState';\nimport { State } from './State';\nimport { start, stop, toEventObject, actionTypes } from './actions';\nvar STATE_DELIMITER = '.';\nvar HISTORY_KEY = '$history';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\n\nvar isStateId = function (str) {\n  return str[0] === STATE_IDENTIFIER;\n};\n\nvar defaultOptions = {\n  guards: {}\n};\n\nvar StateNode =\n/** @class */\nfunction () {\n  function StateNode(config, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var _this = this;\n\n    this.config = config;\n    this.options = options;\n    this.__cache = {\n      events: undefined,\n      relativeValue: new Map(),\n      initialState: undefined\n    };\n    this.idMap = {};\n    this.key = config.key || '(machine)';\n    this.parent = config.parent;\n    this.machine = this.parent ? this.parent.machine : this;\n    this.path = this.parent ? this.parent.path.concat(this.key) : [];\n    this.delimiter = config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n    this.id = config.id || (this.machine ? [this.machine.key].concat(this.path).join(this.delimiter) : this.key);\n    this.initial = config.initial;\n    this.parallel = !!config.parallel;\n    this.states = config.states ? mapValues(config.states, function (stateConfig, key) {\n      var _a;\n\n      var stateNode = new StateNode(__assign({}, stateConfig, {\n        key: key,\n        parent: _this\n      }));\n      Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n      return stateNode;\n    }) : {}; // History config\n\n    this.history = config.history === true ? 'shallow' : config.history || false;\n    this.on = config.on ? this.formatTransitions(config.on) : {};\n    this.transient = !!this.on[NULL_EVENT];\n    this.strict = !!config.strict;\n    this.onEntry = config.onEntry ? [].concat(config.onEntry) : [];\n    this.onExit = config.onExit ? [].concat(config.onExit) : [];\n    this.data = config.data;\n    this.activities = config.activities;\n  }\n\n  StateNode.prototype.getStateNodes = function (state) {\n    var _this = this;\n\n    var _a;\n\n    if (!state) {\n      return [];\n    }\n\n    var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);\n\n    if (typeof stateValue === 'string') {\n      var initialStateValue = this.getStateNode(stateValue).initial;\n      return initialStateValue ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [this.states[stateValue]];\n    }\n\n    var subStateKeys = Object.keys(stateValue);\n    var subStateNodes = subStateKeys.map(function (subStateKey) {\n      return _this.getStateNode(subStateKey);\n    });\n    return subStateNodes.concat(subStateKeys.reduce(function (allSubStateNodes, subStateKey) {\n      var subStateNode = _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n\n      return allSubStateNodes.concat(subStateNode);\n    }, []));\n  };\n\n  StateNode.prototype.handles = function (event) {\n    var eventType = getEventType(event);\n    return this.events.indexOf(eventType) !== -1;\n  };\n\n  StateNode.prototype._transitionLeafNode = function (stateValue, state, event, extendedState) {\n    var stateNode = this.getStateNode(stateValue);\n\n    var next = stateNode._next(state, event, extendedState);\n\n    if (!next.value) {\n      var _a = this._next(state, event, extendedState),\n          value = _a.value,\n          entryExitStates = _a.entryExitStates,\n          actions = _a.actions,\n          paths = _a.paths;\n\n      return {\n        value: value,\n        entryExitStates: {\n          entry: entryExitStates ? entryExitStates.entry : new Set(),\n          exit: new Set([stateNode].concat(entryExitStates ? Array.from(entryExitStates.exit) : []))\n        },\n        actions: actions,\n        paths: paths\n      };\n    }\n\n    return next;\n  };\n\n  StateNode.prototype._transitionHierarchicalNode = function (stateValue, state, event, extendedState) {\n    var subStateKeys = Object.keys(stateValue);\n    var stateNode = this.getStateNode(subStateKeys[0]);\n\n    var next = stateNode._transition(stateValue[subStateKeys[0]], state, event, extendedState);\n\n    if (!next.value) {\n      var _a = this._next(state, event, extendedState),\n          value = _a.value,\n          entryExitStates = _a.entryExitStates,\n          actions = _a.actions,\n          paths = _a.paths;\n\n      return {\n        value: value,\n        entryExitStates: {\n          entry: entryExitStates ? entryExitStates.entry : new Set(),\n          exit: new Set((next.entryExitStates ? Array.from(next.entryExitStates.exit) : []).concat([stateNode], entryExitStates ? Array.from(entryExitStates.exit) : []))\n        },\n        actions: actions,\n        paths: paths\n      };\n    }\n\n    return next;\n  };\n\n  StateNode.prototype._transitionOrthogonalNode = function (stateValue, state, event, extendedState) {\n    var _this = this;\n\n    var noTransitionKeys = [];\n    var transitionMap = {};\n    Object.keys(stateValue).forEach(function (subStateKey) {\n      var subStateValue = stateValue[subStateKey];\n\n      if (!subStateValue) {\n        return;\n      }\n\n      var next = _this.getStateNode(subStateKey)._transition(subStateValue, state, event, extendedState);\n\n      if (!next.value) {\n        noTransitionKeys.push(subStateKey);\n      }\n\n      transitionMap[subStateKey] = next;\n    });\n    var willTransition = Object.keys(transitionMap).some(function (key) {\n      return transitionMap[key].value !== undefined;\n    });\n\n    if (!willTransition) {\n      var _a = this._next(state, event, extendedState),\n          value = _a.value,\n          entryExitStates = _a.entryExitStates,\n          actions = _a.actions,\n          paths = _a.paths;\n\n      return {\n        value: value,\n        entryExitStates: {\n          entry: entryExitStates ? entryExitStates.entry : new Set(),\n          exit: new Set(Object.keys(this.states).map(function (key) {\n            return _this.states[key];\n          }).concat(entryExitStates ? Array.from(entryExitStates.exit) : []))\n        },\n        actions: actions,\n        paths: paths\n      };\n    }\n\n    var allPaths = flatMap(Object.keys(transitionMap).map(function (key) {\n      return transitionMap[key].paths;\n    })); // External transition that escapes orthogonal region\n\n    if (allPaths.length === 1 && !matchesState(pathToStateValue(this.path), pathToStateValue(allPaths[0]))) {\n      return {\n        value: this.machine.resolve(pathsToStateValue(allPaths)),\n        entryExitStates: Object.keys(transitionMap).map(function (key) {\n          return transitionMap[key].entryExitStates;\n        }).reduce(function (allEntryExitStates, entryExitStates) {\n          var _a = entryExitStates,\n              entry = _a.entry,\n              exit = _a.exit;\n          return {\n            entry: new Set(Array.from(allEntryExitStates.entry).concat(Array.from(entry))),\n            exit: new Set(Array.from(allEntryExitStates.exit).concat(Array.from(exit)))\n          };\n        }, {\n          entry: new Set(),\n          exit: new Set()\n        }),\n        actions: flatMap(Object.keys(transitionMap).map(function (key) {\n          return transitionMap[key].actions;\n        })),\n        paths: allPaths\n      };\n    }\n\n    var allResolvedPaths = flatMap(Object.keys(transitionMap).map(function (key) {\n      var transition = transitionMap[key];\n      var value = transition.value || state.value;\n      return toStatePaths(path(_this.path)(value)[key]).map(function (statePath) {\n        return _this.path.concat(key, statePath);\n      });\n    }));\n    var nextStateValue = this.machine.resolve(pathsToStateValue(allResolvedPaths));\n    return {\n      value: nextStateValue,\n      entryExitStates: Object.keys(transitionMap).reduce(function (allEntryExitStates, key) {\n        var _a = transitionMap[key],\n            subStateValue = _a.value,\n            entryExitStates = _a.entryExitStates; // If the event was not handled (no subStateValue),\n        // machine should still be in state without reentry/exit.\n\n        if (!subStateValue || !entryExitStates) {\n          return allEntryExitStates;\n        }\n\n        var entry = entryExitStates.entry,\n            exit = entryExitStates.exit;\n        return {\n          entry: new Set(Array.from(allEntryExitStates.entry).concat(Array.from(entry))),\n          exit: new Set(Array.from(allEntryExitStates.exit).concat(Array.from(exit)))\n        };\n      }, {\n        entry: new Set(),\n        exit: new Set()\n      }),\n      actions: flatMap(Object.keys(transitionMap).map(function (key) {\n        return transitionMap[key].actions;\n      })),\n      paths: toStatePaths(nextStateValue)\n    };\n  };\n\n  StateNode.prototype._transition = function (stateValue, state, event, extendedState) {\n    // leaf node\n    if (typeof stateValue === 'string') {\n      return this._transitionLeafNode(stateValue, state, event, extendedState);\n    } // hierarchical node\n\n\n    if (Object.keys(stateValue).length === 1) {\n      return this._transitionHierarchicalNode(stateValue, state, event, extendedState);\n    } // orthogonal node\n\n\n    return this._transitionOrthogonalNode(stateValue, state, event, extendedState);\n  };\n\n  StateNode.prototype._next = function (state, event, extendedState) {\n    var _this = this;\n\n    var eventType = getEventType(event);\n    var candidates = this.on[eventType];\n    var actions = this.transient ? [{\n      type: actionTypes.null\n    }] : [];\n\n    if (!candidates || !candidates.length) {\n      return {\n        value: undefined,\n        entryExitStates: undefined,\n        actions: actions,\n        paths: []\n      };\n    }\n\n    var nextStateStrings = [];\n    var selectedTransition;\n\n    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n      var candidate = candidates_1[_i];\n      var _a = candidate,\n          cond = _a.cond,\n          stateIn = _a.in // actions: transitionActions\n      ;\n      var extendedStateObject = extendedState || {};\n      var eventObject = toEventObject(event);\n      var isInState = stateIn ? matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value)) : true;\n\n      if ((!cond || this._evaluateCond(cond, extendedStateObject, eventObject, state.value)) && (!stateIn || isInState)) {\n        nextStateStrings = Array.isArray(candidate.target) ? candidate.target : [candidate.target];\n        actions.push.apply(actions, candidate.actions ? candidate.actions : []); // TODO: fixme;\n\n        selectedTransition = candidate;\n        break;\n      }\n    }\n\n    if (nextStateStrings.length === 0) {\n      return {\n        value: undefined,\n        entryExitStates: undefined,\n        actions: actions,\n        paths: []\n      };\n    }\n\n    var nextStateNodes = flatMap(nextStateStrings.map(function (str) {\n      return _this.getRelativeStateNodes(str, state.historyValue);\n    }));\n    var nextStatePaths = nextStateNodes.map(function (stateNode) {\n      return stateNode.path;\n    });\n    var entryExitStates = nextStateNodes.reduce(function (allEntryExitStates, nextStateNode) {\n      var _a = _this._getEntryExitStates(nextStateNode, !!selectedTransition.internal),\n          entry = _a.entry,\n          exit = _a.exit;\n\n      return {\n        entry: new Set(Array.from(allEntryExitStates.entry).concat(Array.from(entry))),\n        exit: new Set(Array.from(allEntryExitStates.exit).concat(Array.from(exit)))\n      };\n    }, {\n      entry: new Set(),\n      exit: new Set()\n    });\n    return {\n      value: this.machine.resolve(pathsToStateValue(flatMap(nextStateStrings.map(function (str) {\n        return _this.getRelativeStateNodes(str, state.historyValue).map(function (s) {\n          return s.path;\n        });\n      })))),\n      entryExitStates: entryExitStates,\n      actions: actions,\n      paths: nextStatePaths\n    };\n  };\n\n  StateNode.prototype._getEntryExitStates = function (nextStateNode, internal) {\n    var entryExitStates = {\n      entry: [],\n      exit: []\n    };\n    var fromPath = this.path;\n    var toPath = nextStateNode.path;\n    var parent = this.machine;\n\n    for (var i = 0; i < Math.min(fromPath.length, toPath.length); i++) {\n      var fromPathSegment = fromPath[i];\n      var toPathSegment = toPath[i];\n\n      if (fromPathSegment === toPathSegment) {\n        parent = parent.getStateNode(fromPathSegment);\n      } else {\n        break;\n      }\n    }\n\n    var commonAncestorPath = parent.path;\n    var marker = parent;\n\n    for (var _i = 0, _a = fromPath.slice(commonAncestorPath.length); _i < _a.length; _i++) {\n      var segment = _a[_i];\n      marker = marker.getStateNode(segment);\n      entryExitStates.exit.unshift(marker);\n    } // Child node\n\n\n    if (parent === this) {\n      if (!internal) {\n        entryExitStates.exit.push(this);\n        entryExitStates.entry.push(this);\n      }\n    }\n\n    marker = parent;\n\n    for (var _b = 0, _c = toPath.slice(commonAncestorPath.length); _b < _c.length; _b++) {\n      var segment = _c[_b];\n      marker = marker.getStateNode(segment);\n      entryExitStates.entry.push(marker);\n    }\n\n    return {\n      entry: new Set(entryExitStates.entry),\n      exit: new Set(entryExitStates.exit)\n    };\n  };\n\n  StateNode.prototype._evaluateCond = function (condition, extendedState, eventObject, interimState) {\n    var condFn;\n\n    if (typeof condition === 'string') {\n      if (!this.machine.options.guards[condition]) {\n        throw new Error(\"String condition '\" + condition + \"' is not defined on machine '\" + this.machine.id + \"'\");\n      }\n\n      condFn = this.machine.options.guards[condition];\n    } else {\n      condFn = condition;\n    }\n\n    return condFn(extendedState, eventObject, interimState);\n  };\n\n  StateNode.prototype._getActions = function (transition) {\n    var entryExitActions = {\n      entry: transition.entryExitStates ? flatMap(Array.from(transition.entryExitStates.entry).map(function (n) {\n        return n.onEntry.concat(n.activities ? n.activities.map(function (activity) {\n          return start(activity);\n        }) : []);\n      })) : [],\n      exit: transition.entryExitStates ? flatMap(Array.from(transition.entryExitStates.exit).map(function (n) {\n        return n.onExit.concat(n.activities ? n.activities.map(function (activity) {\n          return stop(activity);\n        }) : []);\n      })) : []\n    };\n    var actions = (entryExitActions.exit || []).concat(transition.actions || []).concat(entryExitActions.entry || []);\n    return actions;\n  };\n\n  StateNode.prototype._getActivities = function (state, transition) {\n    if (!transition.entryExitStates) {\n      return {};\n    }\n\n    var activityMap = __assign({}, state.activities);\n\n    Array.from(transition.entryExitStates.exit).forEach(function (stateNode) {\n      if (!stateNode.activities) {\n        return; // TODO: fixme\n      }\n\n      stateNode.activities.forEach(function (activity) {\n        activityMap[getActionType(activity)] = false;\n      });\n    });\n    Array.from(transition.entryExitStates.entry).forEach(function (stateNode) {\n      if (!stateNode.activities) {\n        return; // TODO: fixme\n      }\n\n      stateNode.activities.forEach(function (activity) {\n        activityMap[getActionType(activity)] = true;\n      });\n    });\n    return activityMap;\n  };\n\n  StateNode.prototype.transition = function (state, event, extendedState) {\n    var _a;\n\n    var resolvedStateValue = typeof state === 'string' ? this.resolve(pathToStateValue(this.getResolvedPath(state))) : state instanceof State ? state : this.resolve(state);\n    var eventType = getEventType(event);\n\n    if (this.strict) {\n      if (this.events.indexOf(eventType) === -1) {\n        throw new Error(\"Machine '\" + this.id + \"' does not accept event '\" + eventType + \"'\");\n      }\n    }\n\n    var currentState = State.from(resolvedStateValue);\n    var historyValue = resolvedStateValue instanceof State ? resolvedStateValue.historyValue ? resolvedStateValue.historyValue : this.machine.historyValue(resolvedStateValue.value) : this.machine.historyValue(resolvedStateValue);\n\n    var stateTransition = this._transition(currentState.value, currentState, event, extendedState);\n\n    try {\n      this.ensureValidPaths(stateTransition.paths);\n    } catch (e) {\n      throw new Error(\"Event '\" + eventType + \"' leads to an invalid configuration: \" + e.message);\n    }\n\n    var actions = this._getActions(stateTransition);\n\n    var activities = this._getActivities(currentState, stateTransition);\n\n    var raisedEvents = actions.filter(function (action) {\n      return typeof action === 'object' && (action.type === actionTypes.raise || action.type === actionTypes.null);\n    });\n    var nonEventActions = actions.filter(function (action) {\n      return typeof action !== 'object' || action.type !== actionTypes.raise && action.type !== actionTypes.null;\n    });\n    var stateNodes = stateTransition.value ? this.getStateNodes(stateTransition.value) : [];\n    var isTransient = stateNodes.some(function (stateNode) {\n      return stateNode.transient;\n    });\n\n    if (isTransient) {\n      raisedEvents.push({\n        type: actionTypes.null\n      });\n    }\n\n    var data = {};\n    stateNodes.forEach(function (stateNode) {\n      data[stateNode.id] = stateNode.data;\n    });\n    var nextState = stateTransition.value ? new State(stateTransition.value, StateNode.updateHistoryValue(historyValue, stateTransition.value), currentState, nonEventActions, activities, data, raisedEvents) : undefined;\n\n    if (!nextState) {\n      // Unchanged state should be returned with no actions\n      return State.inert(currentState);\n    } // Dispose of previous histories to prevent memory leaks\n\n\n    delete currentState.history;\n    var maybeNextState = nextState;\n\n    while (raisedEvents.length) {\n      var currentActions = maybeNextState.actions;\n      var raisedEvent = raisedEvents.shift();\n      maybeNextState = this.transition(maybeNextState, raisedEvent.type === actionTypes.null ? NULL_EVENT : raisedEvent.event, extendedState);\n\n      (_a = maybeNextState.actions).unshift.apply(_a, currentActions);\n    }\n\n    return maybeNextState;\n  };\n\n  StateNode.prototype.ensureValidPaths = function (paths) {\n    var _this = this;\n\n    var visitedParents = new Map();\n    var stateNodes = flatMap(paths.map(function (_path) {\n      return _this.getRelativeStateNodes(_path);\n    }));\n\n    outer: for (var _i = 0, stateNodes_1 = stateNodes; _i < stateNodes_1.length; _i++) {\n      var stateNode = stateNodes_1[_i];\n      var marker = stateNode;\n\n      while (marker.parent) {\n        if (visitedParents.has(marker.parent)) {\n          if (marker.parent.parallel) {\n            continue outer;\n          }\n\n          throw new Error(\"State node '\" + stateNode.id + \"' shares parent '\" + marker.parent.id + \"' with state node '\" + visitedParents.get(marker.parent).map(function (a) {\n            return a.id;\n          }) + \"'\");\n        }\n\n        if (!visitedParents.get(marker.parent)) {\n          visitedParents.set(marker.parent, [stateNode]);\n        } else {\n          visitedParents.get(marker.parent).push(stateNode);\n        }\n\n        marker = marker.parent;\n      }\n    }\n  };\n\n  StateNode.prototype.getStateNode = function (stateKey) {\n    if (isStateId(stateKey)) {\n      return this.machine.getStateNodeById(stateKey);\n    }\n\n    if (!this.states) {\n      throw new Error(\"Unable to retrieve child state '\" + stateKey + \"' from '\" + this.id + \"'; no child states exist.\");\n    }\n\n    var result = this.states[stateKey];\n\n    if (!result) {\n      throw new Error(\"Child state '\" + stateKey + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return result;\n  };\n\n  StateNode.prototype.getStateNodeById = function (stateId) {\n    var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n    var stateNode = this.machine.idMap[resolvedStateId];\n\n    if (!stateNode) {\n      throw new Error(\"Substate '#\" + resolvedStateId + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return stateNode;\n  };\n\n  StateNode.prototype.getStateNodeByPath = function (statePath) {\n    var arrayStatePath = toStatePath(statePath, this.delimiter);\n    var currentStateNode = this;\n\n    while (arrayStatePath.length) {\n      var key = arrayStatePath.shift();\n      currentStateNode = currentStateNode.getStateNode(key);\n    }\n\n    return currentStateNode;\n  };\n\n  StateNode.prototype.resolve = function (stateValue) {\n    var _this = this;\n\n    var _a;\n\n    if (typeof stateValue === 'string') {\n      var subStateNode = this.getStateNode(stateValue);\n      return subStateNode.initial ? (_a = {}, _a[stateValue] = subStateNode.initialStateValue, _a) : stateValue;\n    }\n\n    if (this.parallel) {\n      return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n        return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : {};\n      });\n    }\n\n    return mapValues(stateValue, function (subStateValue, subStateKey) {\n      return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : {};\n    });\n  };\n\n  Object.defineProperty(StateNode.prototype, \"resolvedStateValue\", {\n    get: function () {\n      var _a, _b;\n\n      var key = this.key;\n\n      if (this.parallel) {\n        return _a = {}, _a[key] = mapFilterValues(this.states, function (stateNode) {\n          return stateNode.resolvedStateValue[stateNode.key];\n        }, function (stateNode) {\n          return !stateNode.history;\n        }), _a;\n      }\n\n      if (!this.initial) {\n        // If leaf node, value is just the state node's key\n        return key;\n      }\n\n      return _b = {}, _b[key] = this.states[this.initial].resolvedStateValue, _b;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n    if (isStateId(stateIdentifier)) {\n      var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n\n      if (!stateNode) {\n        throw new Error(\"Unable to find state node '\" + stateIdentifier + \"'\");\n      }\n\n      return stateNode.path;\n    }\n\n    return toStatePath(stateIdentifier, this.delimiter);\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n    get: function () {\n      if (this.__cache.initialState) {\n        return this.__cache.initialState;\n      }\n\n      var initialStateValue = this.parallel ? mapFilterValues(this.states, function (state) {\n        return state.initialStateValue || {};\n      }, function (stateNode) {\n        return !stateNode.history;\n      }) : typeof this.resolvedStateValue === 'string' ? undefined : this.resolvedStateValue[this.key];\n      this.__cache.initialState = initialStateValue;\n      return this.__cache.initialState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"initialState\", {\n    get: function () {\n      var _a;\n\n      var initialStateValue = this.initialStateValue;\n\n      if (!initialStateValue) {\n        throw new Error(\"Cannot retrieve initial state from simple state '\" + this.id + \".'\");\n      }\n\n      var activityMap = {};\n      var actions = [];\n      this.getStateNodes(initialStateValue).forEach(function (stateNode) {\n        if (stateNode.onEntry) {\n          actions.push.apply(actions, stateNode.onEntry);\n        }\n\n        if (stateNode.activities) {\n          stateNode.activities.forEach(function (activity) {\n            activityMap[getEventType(activity)] = true;\n            actions.push(start(activity));\n          });\n        }\n      }); // TODO: deduplicate - DRY (from this.transition())\n\n      var raisedEvents = actions.filter(function (action) {\n        return typeof action === 'object' && (action.type === actionTypes.raise || action.type === actionTypes.null);\n      });\n      var initialState = new State(initialStateValue, undefined, undefined, actions, activityMap);\n      var maybeNextState = initialState;\n\n      while (raisedEvents.length) {\n        var currentActions = maybeNextState.actions;\n        var raisedEvent = raisedEvents.shift();\n        maybeNextState = this.transition(maybeNextState, raisedEvent.type === actionTypes.null ? NULL_EVENT : raisedEvent.event, undefined // TODO: consider initial state given external state\n        );\n\n        (_a = maybeNextState.actions).unshift.apply(_a, currentActions);\n      }\n\n      return maybeNextState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StateNode.prototype, \"target\", {\n    get: function () {\n      var target;\n\n      if (this.history) {\n        var historyConfig = this.config;\n\n        if (historyConfig.target && typeof historyConfig.target === 'string') {\n          target = isStateId(historyConfig.target) ? pathToStateValue(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n        } else {\n          target = historyConfig.target;\n        }\n      }\n\n      return target;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.getStates = function (stateValue) {\n    var _this = this;\n\n    if (typeof stateValue === 'string') {\n      return [this.states[stateValue]];\n    }\n\n    var stateNodes = [];\n    Object.keys(stateValue).forEach(function (key) {\n      stateNodes.push.apply(stateNodes, _this.states[key].getStates(stateValue[key]));\n    });\n    return stateNodes;\n  };\n  /**\n   * Returns the leaf nodes from a state path relative to this state node.\n   *\n   * @param relativeStateId The relative state path to retrieve the state nodes\n   * @param history The previous state to retrieve history\n   * @param resolve Whether state nodes should resolve to initial child state nodes\n   */\n\n\n  StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n    if (resolve === void 0) {\n      resolve = true;\n    }\n\n    if (typeof relativeStateId === 'string' && isStateId(relativeStateId)) {\n      var unresolvedStateNode = this.getStateNodeById(relativeStateId);\n      return resolve ? unresolvedStateNode.history ? unresolvedStateNode.resolveHistory(historyValue) : unresolvedStateNode.initialStateNodes : [unresolvedStateNode];\n    }\n\n    var statePath = toStatePath(relativeStateId, this.delimiter);\n    var rootStateNode = this.parent || this;\n    var unresolvedStateNodes = rootStateNode.getFromRelativePath(statePath, historyValue);\n\n    if (!resolve) {\n      return unresolvedStateNodes;\n    }\n\n    return flatMap(unresolvedStateNodes.map(function (stateNode) {\n      return stateNode.initialStateNodes;\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n    get: function () {\n      var _this = this; // todo - isLeafNode or something\n\n\n      if (!this.parallel && !this.initial) {\n        return [this];\n      }\n\n      var initialState = this.initialState;\n      var initialStateNodePaths = toStatePaths(initialState.value);\n      return flatMap(initialStateNodePaths.map(function (initialPath) {\n        return _this.getFromRelativePath(initialPath);\n      }));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Retrieves state nodes from a relative path to this state node.\n   *\n   * @param relativePath The relative path from this state node\n   * @param historyValue\n   */\n\n  StateNode.prototype.getFromRelativePath = function (relativePath, historyValue) {\n    var _this = this;\n\n    if (!relativePath.length) {\n      return [this];\n    }\n\n    var x = relativePath[0],\n        xs = relativePath.slice(1);\n\n    if (!this.states) {\n      throw new Error(\"Cannot retrieve subPath '\" + x + \"' from node with no states\");\n    } // TODO: remove (4.0)\n\n\n    if (x === HISTORY_KEY) {\n      if (!historyValue) {\n        return [this];\n      }\n\n      var subHistoryValue = nestedPath(this.path, 'states')(historyValue).current;\n\n      if (typeof subHistoryValue === 'string') {\n        return this.states[subHistoryValue].getFromRelativePath(xs, historyValue);\n      }\n\n      return flatMap(Object.keys(subHistoryValue).map(function (key) {\n        return _this.states[key].getFromRelativePath(xs, historyValue);\n      }));\n    }\n\n    var childStateNode = this.getStateNode(x);\n\n    if (childStateNode.history) {\n      return childStateNode.resolveHistory(historyValue);\n    }\n\n    if (!this.states[x]) {\n      throw new Error(\"Child state '\" + x + \"' does not exist on '\" + this.id + \"'\");\n    }\n\n    return this.states[x].getFromRelativePath(xs, historyValue);\n  };\n\n  StateNode.updateHistoryValue = function (hist, stateValue) {\n    function update(_hist, _sv) {\n      return mapValues(_hist.states, function (subHist, key) {\n        if (!subHist) {\n          return undefined;\n        }\n\n        var subStateValue = (typeof _sv === 'string' ? undefined : _sv[key]) || (subHist ? subHist.current : undefined);\n\n        if (!subStateValue) {\n          return undefined;\n        }\n\n        return {\n          current: subStateValue,\n          states: update(subHist, subStateValue)\n        };\n      });\n    }\n\n    return {\n      current: stateValue,\n      states: update(hist, stateValue)\n    };\n  };\n\n  StateNode.prototype.historyValue = function (relativeStateValue) {\n    if (!Object.keys(this.states).length) {\n      return undefined;\n    }\n\n    return {\n      current: relativeStateValue || this.initialStateValue,\n      states: mapFilterValues(this.states, function (stateNode, key) {\n        if (!relativeStateValue) {\n          return stateNode.historyValue();\n        }\n\n        var subStateValue = typeof relativeStateValue === 'string' ? undefined : relativeStateValue[key];\n        return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n      }, function (stateNode) {\n        return !stateNode.history;\n      })\n    };\n  };\n  /**\n   * Resolves to the historical value(s) of the parent state node,\n   * represented by state nodes.\n   *\n   * @param historyValue\n   */\n\n\n  StateNode.prototype.resolveHistory = function (historyValue) {\n    var _this = this;\n\n    if (!this.history) {\n      return [this];\n    }\n\n    var parent = this.parent;\n\n    if (!historyValue) {\n      return this.target ? flatMap(toStatePaths(this.target).map(function (relativeChildPath) {\n        return parent.getFromRelativePath(relativeChildPath);\n      })) : this.parent.initialStateNodes;\n    }\n\n    var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n\n    if (typeof subHistoryValue === 'string') {\n      return [parent.getStateNode(subHistoryValue)];\n    }\n\n    return flatMap(toStatePaths(subHistoryValue).map(function (subStatePath) {\n      return _this.history === 'deep' ? parent.getFromRelativePath(subStatePath) : [parent.states[subStatePath[0]]];\n    }));\n  };\n\n  Object.defineProperty(StateNode.prototype, \"events\", {\n    get: function () {\n      if (this.__cache.events) {\n        return this.__cache.events;\n      }\n\n      var states = this.states;\n      var events = new Set(Object.keys(this.on));\n\n      if (states) {\n        Object.keys(states).forEach(function (stateId) {\n          var state = states[stateId];\n\n          if (state.states) {\n            for (var _i = 0, _a = state.events; _i < _a.length; _i++) {\n              var event_1 = _a[_i];\n              events.add(\"\" + event_1);\n            }\n          }\n        });\n      }\n\n      return this.__cache.events = Array.from(events);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StateNode.prototype.formatTransition = function (targets, transitionConfig) {\n    var _this = this;\n\n    var internal = transitionConfig ? transitionConfig.internal : false; // Format targets to their full string path\n\n    var formattedTargets = targets.map(function (target) {\n      var internalTarget = typeof target === 'string' && target[0] === _this.delimiter;\n      internal = internal || internalTarget; // If internal target is defined on machine,\n      // do not include machine key on target\n\n      if (internalTarget && !_this.parent) {\n        return target.slice(1);\n      }\n\n      return internalTarget ? _this.key + target : target;\n    });\n    return __assign({}, transitionConfig, {\n      target: formattedTargets,\n      internal: internal\n    });\n  };\n\n  StateNode.prototype.formatTransitions = function (onConfig) {\n    var _this = this;\n\n    return mapValues(onConfig, function (value) {\n      if (value === undefined) {\n        return [];\n      }\n\n      if (Array.isArray(value)) {\n        return value.map(function (targetTransitionConfig) {\n          return _this.formatTransition([].concat(targetTransitionConfig.target), targetTransitionConfig);\n        });\n      }\n\n      if (typeof value === 'string') {\n        return [_this.formatTransition([value])];\n      }\n\n      return Object.keys(value).map(function (target) {\n        return _this.formatTransition([target], value[target]);\n      });\n    });\n  };\n\n  return StateNode;\n}();\n\nexport function Machine(config, options) {\n  return new StateNode(config, options);\n}\nexport { StateNode };","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","getEventType","toStatePath","toStateValue","mapValues","path","toStatePaths","pathsToStateValue","pathToStateValue","getActionType","flatMap","mapFilterValues","nestedPath","matchesState","State","start","stop","toEventObject","actionTypes","STATE_DELIMITER","HISTORY_KEY","NULL_EVENT","STATE_IDENTIFIER","isStateId","str","defaultOptions","guards","StateNode","config","options","_this","__cache","events","undefined","relativeValue","Map","initialState","idMap","key","parent","machine","concat","delimiter","id","join","initial","parallel","states","stateConfig","_a","stateNode","history","on","formatTransitions","transient","strict","onEntry","onExit","data","activities","getStateNodes","state","stateValue","value","initialStateValue","getStateNode","subStateKeys","keys","subStateNodes","map","subStateKey","reduce","allSubStateNodes","subStateNode","handles","event","eventType","indexOf","_transitionLeafNode","extendedState","next","_next","entryExitStates","actions","paths","entry","Set","exit","Array","from","_transitionHierarchicalNode","_transition","_transitionOrthogonalNode","noTransitionKeys","transitionMap","forEach","subStateValue","push","willTransition","some","allPaths","resolve","allEntryExitStates","allResolvedPaths","transition","statePath","nextStateValue","candidates","type","null","nextStateStrings","selectedTransition","_i","candidates_1","candidate","cond","stateIn","in","extendedStateObject","eventObject","isInState","slice","_evaluateCond","isArray","target","apply","nextStateNodes","getRelativeStateNodes","historyValue","nextStatePaths","nextStateNode","_getEntryExitStates","internal","fromPath","toPath","Math","min","fromPathSegment","toPathSegment","commonAncestorPath","marker","segment","unshift","_b","_c","condition","interimState","condFn","Error","_getActions","entryExitActions","activity","_getActivities","activityMap","resolvedStateValue","getResolvedPath","currentState","stateTransition","ensureValidPaths","e","message","raisedEvents","filter","action","raise","nonEventActions","stateNodes","isTransient","nextState","updateHistoryValue","inert","maybeNextState","currentActions","raisedEvent","shift","visitedParents","_path","outer","stateNodes_1","has","get","a","set","stateKey","getStateNodeById","result","stateId","resolvedStateId","getStateNodeByPath","arrayStatePath","currentStateNode","defineProperty","enumerable","configurable","stateIdentifier","historyConfig","getStates","relativeStateId","unresolvedStateNode","resolveHistory","initialStateNodes","rootStateNode","unresolvedStateNodes","getFromRelativePath","initialStateNodePaths","initialPath","relativePath","x","xs","subHistoryValue","current","childStateNode","hist","update","_hist","_sv","subHist","relativeStateValue","relativeChildPath","subStatePath","event_1","add","formatTransition","targets","transitionConfig","formattedTargets","internalTarget","onConfig","targetTransitionConfig","Machine"],"sources":["/Users/deviambar/Documents/simpleapp/frontend/node_modules/xstate/es/StateNode.js"],"sourcesContent":["var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport { getEventType, toStatePath, toStateValue, mapValues, path, toStatePaths, pathsToStateValue, pathToStateValue, getActionType, flatMap, mapFilterValues, nestedPath } from './utils';\nimport { matchesState } from './matchesState';\nimport { State } from './State';\nimport { start, stop, toEventObject, actionTypes } from './actions';\nvar STATE_DELIMITER = '.';\nvar HISTORY_KEY = '$history';\nvar NULL_EVENT = '';\nvar STATE_IDENTIFIER = '#';\nvar isStateId = function (str) { return str[0] === STATE_IDENTIFIER; };\nvar defaultOptions = {\n    guards: {}\n};\nvar StateNode = /** @class */ (function () {\n    function StateNode(config, options) {\n        if (options === void 0) { options = defaultOptions; }\n        var _this = this;\n        this.config = config;\n        this.options = options;\n        this.__cache = {\n            events: undefined,\n            relativeValue: new Map(),\n            initialState: undefined\n        };\n        this.idMap = {};\n        this.key = config.key || '(machine)';\n        this.parent = config.parent;\n        this.machine = this.parent ? this.parent.machine : this;\n        this.path = this.parent ? this.parent.path.concat(this.key) : [];\n        this.delimiter =\n            config.delimiter ||\n                (this.parent ? this.parent.delimiter : STATE_DELIMITER);\n        this.id =\n            config.id ||\n                (this.machine\n                    ? [this.machine.key].concat(this.path).join(this.delimiter)\n                    : this.key);\n        this.initial = config.initial;\n        this.parallel = !!config.parallel;\n        this.states = (config.states\n            ? mapValues(config.states, function (stateConfig, key) {\n                var _a;\n                var stateNode = new StateNode(__assign({}, stateConfig, { key: key, parent: _this }));\n                Object.assign(_this.idMap, __assign((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n                return stateNode;\n            })\n            : {});\n        // History config\n        this.history =\n            config.history === true ? 'shallow' : config.history || false;\n        this.on = config.on ? this.formatTransitions(config.on) : {};\n        this.transient = !!this.on[NULL_EVENT];\n        this.strict = !!config.strict;\n        this.onEntry = config.onEntry\n            ? [].concat(config.onEntry)\n            : [];\n        this.onExit = config.onExit ? [].concat(config.onExit) : [];\n        this.data = config.data;\n        this.activities = config.activities;\n    }\n    StateNode.prototype.getStateNodes = function (state) {\n        var _this = this;\n        var _a;\n        if (!state) {\n            return [];\n        }\n        var stateValue = state instanceof State\n            ? state.value\n            : toStateValue(state, this.delimiter);\n        if (typeof stateValue === 'string') {\n            var initialStateValue = this.getStateNode(stateValue).initial;\n            return initialStateValue\n                ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a))\n                : [this.states[stateValue]];\n        }\n        var subStateKeys = Object.keys(stateValue);\n        var subStateNodes = subStateKeys.map(function (subStateKey) {\n            return _this.getStateNode(subStateKey);\n        });\n        return subStateNodes.concat(subStateKeys.reduce(function (allSubStateNodes, subStateKey) {\n            var subStateNode = _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n            return allSubStateNodes.concat(subStateNode);\n        }, []));\n    };\n    StateNode.prototype.handles = function (event) {\n        var eventType = getEventType(event);\n        return this.events.indexOf(eventType) !== -1;\n    };\n    StateNode.prototype._transitionLeafNode = function (stateValue, state, event, extendedState) {\n        var stateNode = this.getStateNode(stateValue);\n        var next = stateNode._next(state, event, extendedState);\n        if (!next.value) {\n            var _a = this._next(state, event, extendedState), value = _a.value, entryExitStates = _a.entryExitStates, actions = _a.actions, paths = _a.paths;\n            return {\n                value: value,\n                entryExitStates: {\n                    entry: entryExitStates ? entryExitStates.entry : new Set(),\n                    exit: new Set([\n                        stateNode\n                    ].concat((entryExitStates\n                        ? Array.from(entryExitStates.exit)\n                        : [])))\n                },\n                actions: actions,\n                paths: paths\n            };\n        }\n        return next;\n    };\n    StateNode.prototype._transitionHierarchicalNode = function (stateValue, state, event, extendedState) {\n        var subStateKeys = Object.keys(stateValue);\n        var stateNode = this.getStateNode(subStateKeys[0]);\n        var next = stateNode._transition(stateValue[subStateKeys[0]], state, event, extendedState);\n        if (!next.value) {\n            var _a = this._next(state, event, extendedState), value = _a.value, entryExitStates = _a.entryExitStates, actions = _a.actions, paths = _a.paths;\n            return {\n                value: value,\n                entryExitStates: {\n                    entry: entryExitStates ? entryExitStates.entry : new Set(),\n                    exit: new Set((next.entryExitStates\n                        ? Array.from(next.entryExitStates.exit)\n                        : []).concat([\n                        stateNode\n                    ], (entryExitStates\n                        ? Array.from(entryExitStates.exit)\n                        : [])))\n                },\n                actions: actions,\n                paths: paths\n            };\n        }\n        return next;\n    };\n    StateNode.prototype._transitionOrthogonalNode = function (stateValue, state, event, extendedState) {\n        var _this = this;\n        var noTransitionKeys = [];\n        var transitionMap = {};\n        Object.keys(stateValue).forEach(function (subStateKey) {\n            var subStateValue = stateValue[subStateKey];\n            if (!subStateValue) {\n                return;\n            }\n            var next = _this.getStateNode(subStateKey)._transition(subStateValue, state, event, extendedState);\n            if (!next.value) {\n                noTransitionKeys.push(subStateKey);\n            }\n            transitionMap[subStateKey] = next;\n        });\n        var willTransition = Object.keys(transitionMap).some(function (key) { return transitionMap[key].value !== undefined; });\n        if (!willTransition) {\n            var _a = this._next(state, event, extendedState), value = _a.value, entryExitStates = _a.entryExitStates, actions = _a.actions, paths = _a.paths;\n            return {\n                value: value,\n                entryExitStates: {\n                    entry: entryExitStates ? entryExitStates.entry : new Set(),\n                    exit: new Set(Object.keys(this.states).map(function (key) { return _this.states[key]; }).concat((entryExitStates ? Array.from(entryExitStates.exit) : [])))\n                },\n                actions: actions,\n                paths: paths\n            };\n        }\n        var allPaths = flatMap(Object.keys(transitionMap).map(function (key) { return transitionMap[key].paths; }));\n        // External transition that escapes orthogonal region\n        if (allPaths.length === 1 &&\n            !matchesState(pathToStateValue(this.path), pathToStateValue(allPaths[0]))) {\n            return {\n                value: this.machine.resolve(pathsToStateValue(allPaths)),\n                entryExitStates: Object.keys(transitionMap)\n                    .map(function (key) { return transitionMap[key].entryExitStates; })\n                    .reduce(function (allEntryExitStates, entryExitStates) {\n                    var _a = entryExitStates, entry = _a.entry, exit = _a.exit;\n                    return {\n                        entry: new Set(Array.from(allEntryExitStates.entry).concat(Array.from(entry))),\n                        exit: new Set(Array.from(allEntryExitStates.exit).concat(Array.from(exit)))\n                    };\n                }, { entry: new Set(), exit: new Set() }),\n                actions: flatMap(Object.keys(transitionMap).map(function (key) {\n                    return transitionMap[key].actions;\n                })),\n                paths: allPaths\n            };\n        }\n        var allResolvedPaths = flatMap(Object.keys(transitionMap).map(function (key) {\n            var transition = transitionMap[key];\n            var value = transition.value || state.value;\n            return toStatePaths(path(_this.path)(value)[key]).map(function (statePath) {\n                return _this.path.concat(key, statePath);\n            });\n        }));\n        var nextStateValue = this.machine.resolve(pathsToStateValue(allResolvedPaths));\n        return {\n            value: nextStateValue,\n            entryExitStates: Object.keys(transitionMap).reduce(function (allEntryExitStates, key) {\n                var _a = transitionMap[key], subStateValue = _a.value, entryExitStates = _a.entryExitStates;\n                // If the event was not handled (no subStateValue),\n                // machine should still be in state without reentry/exit.\n                if (!subStateValue || !entryExitStates) {\n                    return allEntryExitStates;\n                }\n                var entry = entryExitStates.entry, exit = entryExitStates.exit;\n                return {\n                    entry: new Set(Array.from(allEntryExitStates.entry).concat(Array.from(entry))),\n                    exit: new Set(Array.from(allEntryExitStates.exit).concat(Array.from(exit)))\n                };\n            }, { entry: new Set(), exit: new Set() }),\n            actions: flatMap(Object.keys(transitionMap).map(function (key) {\n                return transitionMap[key].actions;\n            })),\n            paths: toStatePaths(nextStateValue)\n        };\n    };\n    StateNode.prototype._transition = function (stateValue, state, event, extendedState) {\n        // leaf node\n        if (typeof stateValue === 'string') {\n            return this._transitionLeafNode(stateValue, state, event, extendedState);\n        }\n        // hierarchical node\n        if (Object.keys(stateValue).length === 1) {\n            return this._transitionHierarchicalNode(stateValue, state, event, extendedState);\n        }\n        // orthogonal node\n        return this._transitionOrthogonalNode(stateValue, state, event, extendedState);\n    };\n    StateNode.prototype._next = function (state, event, extendedState) {\n        var _this = this;\n        var eventType = getEventType(event);\n        var candidates = this.on[eventType];\n        var actions = this.transient\n            ? [{ type: actionTypes.null }]\n            : [];\n        if (!candidates || !candidates.length) {\n            return {\n                value: undefined,\n                entryExitStates: undefined,\n                actions: actions,\n                paths: []\n            };\n        }\n        var nextStateStrings = [];\n        var selectedTransition;\n        for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n            var candidate = candidates_1[_i];\n            var _a = candidate, cond = _a.cond, stateIn = _a.in\n            // actions: transitionActions\n            ;\n            var extendedStateObject = extendedState || {};\n            var eventObject = toEventObject(event);\n            var isInState = stateIn\n                ? matchesState(toStateValue(stateIn, this.delimiter), path(this.path.slice(0, -2))(state.value))\n                : true;\n            if ((!cond ||\n                this._evaluateCond(cond, extendedStateObject, eventObject, state.value)) &&\n                (!stateIn || isInState)) {\n                nextStateStrings = Array.isArray(candidate.target)\n                    ? candidate.target\n                    : [candidate.target];\n                actions.push.apply(actions, (candidate.actions ? candidate.actions : [])); // TODO: fixme;\n                selectedTransition = candidate;\n                break;\n            }\n        }\n        if (nextStateStrings.length === 0) {\n            return {\n                value: undefined,\n                entryExitStates: undefined,\n                actions: actions,\n                paths: []\n            };\n        }\n        var nextStateNodes = flatMap(nextStateStrings.map(function (str) {\n            return _this.getRelativeStateNodes(str, state.historyValue);\n        }));\n        var nextStatePaths = nextStateNodes.map(function (stateNode) { return stateNode.path; });\n        var entryExitStates = nextStateNodes.reduce(function (allEntryExitStates, nextStateNode) {\n            var _a = _this._getEntryExitStates(nextStateNode, !!selectedTransition.internal), entry = _a.entry, exit = _a.exit;\n            return {\n                entry: new Set(Array.from(allEntryExitStates.entry).concat(Array.from(entry))),\n                exit: new Set(Array.from(allEntryExitStates.exit).concat(Array.from(exit)))\n            };\n        }, { entry: new Set(), exit: new Set() });\n        return {\n            value: this.machine.resolve(pathsToStateValue(flatMap(nextStateStrings.map(function (str) {\n                return _this.getRelativeStateNodes(str, state.historyValue).map(function (s) { return s.path; });\n            })))),\n            entryExitStates: entryExitStates,\n            actions: actions,\n            paths: nextStatePaths\n        };\n    };\n    StateNode.prototype._getEntryExitStates = function (nextStateNode, internal) {\n        var entryExitStates = {\n            entry: [],\n            exit: []\n        };\n        var fromPath = this.path;\n        var toPath = nextStateNode.path;\n        var parent = this.machine;\n        for (var i = 0; i < Math.min(fromPath.length, toPath.length); i++) {\n            var fromPathSegment = fromPath[i];\n            var toPathSegment = toPath[i];\n            if (fromPathSegment === toPathSegment) {\n                parent = parent.getStateNode(fromPathSegment);\n            }\n            else {\n                break;\n            }\n        }\n        var commonAncestorPath = parent.path;\n        var marker = parent;\n        for (var _i = 0, _a = fromPath.slice(commonAncestorPath.length); _i < _a.length; _i++) {\n            var segment = _a[_i];\n            marker = marker.getStateNode(segment);\n            entryExitStates.exit.unshift(marker);\n        }\n        // Child node\n        if (parent === this) {\n            if (!internal) {\n                entryExitStates.exit.push(this);\n                entryExitStates.entry.push(this);\n            }\n        }\n        marker = parent;\n        for (var _b = 0, _c = toPath.slice(commonAncestorPath.length); _b < _c.length; _b++) {\n            var segment = _c[_b];\n            marker = marker.getStateNode(segment);\n            entryExitStates.entry.push(marker);\n        }\n        return {\n            entry: new Set(entryExitStates.entry),\n            exit: new Set(entryExitStates.exit)\n        };\n    };\n    StateNode.prototype._evaluateCond = function (condition, extendedState, eventObject, interimState) {\n        var condFn;\n        if (typeof condition === 'string') {\n            if (!this.machine.options.guards[condition]) {\n                throw new Error(\"String condition '\" + condition + \"' is not defined on machine '\" + this.machine.id + \"'\");\n            }\n            condFn = this.machine.options.guards[condition];\n        }\n        else {\n            condFn = condition;\n        }\n        return condFn(extendedState, eventObject, interimState);\n    };\n    StateNode.prototype._getActions = function (transition) {\n        var entryExitActions = {\n            entry: transition.entryExitStates\n                ? flatMap(Array.from(transition.entryExitStates.entry).map(function (n) { return n.onEntry.concat((n.activities\n                    ? n.activities.map(function (activity) { return start(activity); })\n                    : [])); }))\n                : [],\n            exit: transition.entryExitStates\n                ? flatMap(Array.from(transition.entryExitStates.exit).map(function (n) { return n.onExit.concat((n.activities\n                    ? n.activities.map(function (activity) { return stop(activity); })\n                    : [])); }))\n                : []\n        };\n        var actions = (entryExitActions.exit || [])\n            .concat(transition.actions || [])\n            .concat(entryExitActions.entry || []);\n        return actions;\n    };\n    StateNode.prototype._getActivities = function (state, transition) {\n        if (!transition.entryExitStates) {\n            return {};\n        }\n        var activityMap = __assign({}, state.activities);\n        Array.from(transition.entryExitStates.exit).forEach(function (stateNode) {\n            if (!stateNode.activities) {\n                return; // TODO: fixme\n            }\n            stateNode.activities.forEach(function (activity) {\n                activityMap[getActionType(activity)] = false;\n            });\n        });\n        Array.from(transition.entryExitStates.entry).forEach(function (stateNode) {\n            if (!stateNode.activities) {\n                return; // TODO: fixme\n            }\n            stateNode.activities.forEach(function (activity) {\n                activityMap[getActionType(activity)] = true;\n            });\n        });\n        return activityMap;\n    };\n    StateNode.prototype.transition = function (state, event, extendedState) {\n        var _a;\n        var resolvedStateValue = typeof state === 'string'\n            ? this.resolve(pathToStateValue(this.getResolvedPath(state)))\n            : state instanceof State\n                ? state\n                : this.resolve(state);\n        var eventType = getEventType(event);\n        if (this.strict) {\n            if (this.events.indexOf(eventType) === -1) {\n                throw new Error(\"Machine '\" + this.id + \"' does not accept event '\" + eventType + \"'\");\n            }\n        }\n        var currentState = State.from(resolvedStateValue);\n        var historyValue = resolvedStateValue instanceof State\n            ? resolvedStateValue.historyValue\n                ? resolvedStateValue.historyValue\n                : this.machine.historyValue(resolvedStateValue.value)\n            : this.machine.historyValue(resolvedStateValue);\n        var stateTransition = this._transition(currentState.value, currentState, event, extendedState);\n        try {\n            this.ensureValidPaths(stateTransition.paths);\n        }\n        catch (e) {\n            throw new Error(\"Event '\" + eventType + \"' leads to an invalid configuration: \" + e.message);\n        }\n        var actions = this._getActions(stateTransition);\n        var activities = this._getActivities(currentState, stateTransition);\n        var raisedEvents = actions.filter(function (action) {\n            return typeof action === 'object' &&\n                (action.type === actionTypes.raise || action.type === actionTypes.null);\n        });\n        var nonEventActions = actions.filter(function (action) {\n            return typeof action !== 'object' ||\n                (action.type !== actionTypes.raise && action.type !== actionTypes.null);\n        });\n        var stateNodes = stateTransition.value\n            ? this.getStateNodes(stateTransition.value)\n            : [];\n        var isTransient = stateNodes.some(function (stateNode) { return stateNode.transient; });\n        if (isTransient) {\n            raisedEvents.push({ type: actionTypes.null });\n        }\n        var data = {};\n        stateNodes.forEach(function (stateNode) {\n            data[stateNode.id] = stateNode.data;\n        });\n        var nextState = stateTransition.value\n            ? new State(stateTransition.value, StateNode.updateHistoryValue(historyValue, stateTransition.value), currentState, nonEventActions, activities, data, raisedEvents)\n            : undefined;\n        if (!nextState) {\n            // Unchanged state should be returned with no actions\n            return State.inert(currentState);\n        }\n        // Dispose of previous histories to prevent memory leaks\n        delete currentState.history;\n        var maybeNextState = nextState;\n        while (raisedEvents.length) {\n            var currentActions = maybeNextState.actions;\n            var raisedEvent = raisedEvents.shift();\n            maybeNextState = this.transition(maybeNextState, raisedEvent.type === actionTypes.null ? NULL_EVENT : raisedEvent.event, extendedState);\n            (_a = maybeNextState.actions).unshift.apply(_a, currentActions);\n        }\n        return maybeNextState;\n    };\n    StateNode.prototype.ensureValidPaths = function (paths) {\n        var _this = this;\n        var visitedParents = new Map();\n        var stateNodes = flatMap(paths.map(function (_path) { return _this.getRelativeStateNodes(_path); }));\n        outer: for (var _i = 0, stateNodes_1 = stateNodes; _i < stateNodes_1.length; _i++) {\n            var stateNode = stateNodes_1[_i];\n            var marker = stateNode;\n            while (marker.parent) {\n                if (visitedParents.has(marker.parent)) {\n                    if (marker.parent.parallel) {\n                        continue outer;\n                    }\n                    throw new Error(\"State node '\" + stateNode.id + \"' shares parent '\" + marker.parent.id + \"' with state node '\" + visitedParents\n                        .get(marker.parent)\n                        .map(function (a) { return a.id; }) + \"'\");\n                }\n                if (!visitedParents.get(marker.parent)) {\n                    visitedParents.set(marker.parent, [stateNode]);\n                }\n                else {\n                    visitedParents.get(marker.parent).push(stateNode);\n                }\n                marker = marker.parent;\n            }\n        }\n    };\n    StateNode.prototype.getStateNode = function (stateKey) {\n        if (isStateId(stateKey)) {\n            return this.machine.getStateNodeById(stateKey);\n        }\n        if (!this.states) {\n            throw new Error(\"Unable to retrieve child state '\" + stateKey + \"' from '\" + this.id + \"'; no child states exist.\");\n        }\n        var result = this.states[stateKey];\n        if (!result) {\n            throw new Error(\"Child state '\" + stateKey + \"' does not exist on '\" + this.id + \"'\");\n        }\n        return result;\n    };\n    StateNode.prototype.getStateNodeById = function (stateId) {\n        var resolvedStateId = isStateId(stateId)\n            ? stateId.slice(STATE_IDENTIFIER.length)\n            : stateId;\n        var stateNode = this.machine.idMap[resolvedStateId];\n        if (!stateNode) {\n            throw new Error(\"Substate '#\" + resolvedStateId + \"' does not exist on '\" + this.id + \"'\");\n        }\n        return stateNode;\n    };\n    StateNode.prototype.getStateNodeByPath = function (statePath) {\n        var arrayStatePath = toStatePath(statePath, this.delimiter);\n        var currentStateNode = this;\n        while (arrayStatePath.length) {\n            var key = arrayStatePath.shift();\n            currentStateNode = currentStateNode.getStateNode(key);\n        }\n        return currentStateNode;\n    };\n    StateNode.prototype.resolve = function (stateValue) {\n        var _this = this;\n        var _a;\n        if (typeof stateValue === 'string') {\n            var subStateNode = this.getStateNode(stateValue);\n            return subStateNode.initial\n                ? (_a = {}, _a[stateValue] = subStateNode.initialStateValue, _a) : stateValue;\n        }\n        if (this.parallel) {\n            return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {\n                return subStateValue\n                    ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue)\n                    : {};\n            });\n        }\n        return mapValues(stateValue, function (subStateValue, subStateKey) {\n            return subStateValue\n                ? _this.getStateNode(subStateKey).resolve(subStateValue)\n                : {};\n        });\n    };\n    Object.defineProperty(StateNode.prototype, \"resolvedStateValue\", {\n        get: function () {\n            var _a, _b;\n            var key = this.key;\n            if (this.parallel) {\n                return _a = {},\n                    _a[key] = mapFilterValues(this.states, function (stateNode) { return stateNode.resolvedStateValue[stateNode.key]; }, function (stateNode) { return !stateNode.history; }),\n                    _a;\n            }\n            if (!this.initial) {\n                // If leaf node, value is just the state node's key\n                return key;\n            }\n            return _b = {},\n                _b[key] = this.states[this.initial].resolvedStateValue,\n                _b;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StateNode.prototype.getResolvedPath = function (stateIdentifier) {\n        if (isStateId(stateIdentifier)) {\n            var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n            if (!stateNode) {\n                throw new Error(\"Unable to find state node '\" + stateIdentifier + \"'\");\n            }\n            return stateNode.path;\n        }\n        return toStatePath(stateIdentifier, this.delimiter);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n        get: function () {\n            if (this.__cache.initialState) {\n                return this.__cache.initialState;\n            }\n            var initialStateValue = (this.parallel\n                ? mapFilterValues(this.states, function (state) { return state.initialStateValue || {}; }, function (stateNode) { return !stateNode.history; })\n                : typeof this.resolvedStateValue === 'string'\n                    ? undefined\n                    : this.resolvedStateValue[this.key]);\n            this.__cache.initialState = initialStateValue;\n            return this.__cache.initialState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"initialState\", {\n        get: function () {\n            var _a;\n            var initialStateValue = this.initialStateValue;\n            if (!initialStateValue) {\n                throw new Error(\"Cannot retrieve initial state from simple state '\" + this.id + \".'\");\n            }\n            var activityMap = {};\n            var actions = [];\n            this.getStateNodes(initialStateValue).forEach(function (stateNode) {\n                if (stateNode.onEntry) {\n                    actions.push.apply(actions, stateNode.onEntry);\n                }\n                if (stateNode.activities) {\n                    stateNode.activities.forEach(function (activity) {\n                        activityMap[getEventType(activity)] = true;\n                        actions.push(start(activity));\n                    });\n                }\n            });\n            // TODO: deduplicate - DRY (from this.transition())\n            var raisedEvents = actions.filter(function (action) {\n                return typeof action === 'object' &&\n                    (action.type === actionTypes.raise || action.type === actionTypes.null);\n            });\n            var initialState = new State(initialStateValue, undefined, undefined, actions, activityMap);\n            var maybeNextState = initialState;\n            while (raisedEvents.length) {\n                var currentActions = maybeNextState.actions;\n                var raisedEvent = raisedEvents.shift();\n                maybeNextState = this.transition(maybeNextState, raisedEvent.type === actionTypes.null ? NULL_EVENT : raisedEvent.event, undefined // TODO: consider initial state given external state\n                );\n                (_a = maybeNextState.actions).unshift.apply(_a, currentActions);\n            }\n            return maybeNextState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"target\", {\n        get: function () {\n            var target;\n            if (this.history) {\n                var historyConfig = this.config;\n                if (historyConfig.target && typeof historyConfig.target === 'string') {\n                    target = isStateId(historyConfig.target)\n                        ? pathToStateValue(this.machine\n                            .getStateNodeById(historyConfig.target)\n                            .path.slice(this.path.length - 1))\n                        : historyConfig.target;\n                }\n                else {\n                    target = historyConfig.target;\n                }\n            }\n            return target;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StateNode.prototype.getStates = function (stateValue) {\n        var _this = this;\n        if (typeof stateValue === 'string') {\n            return [this.states[stateValue]];\n        }\n        var stateNodes = [];\n        Object.keys(stateValue).forEach(function (key) {\n            stateNodes.push.apply(stateNodes, _this.states[key].getStates(stateValue[key]));\n        });\n        return stateNodes;\n    };\n    /**\n     * Returns the leaf nodes from a state path relative to this state node.\n     *\n     * @param relativeStateId The relative state path to retrieve the state nodes\n     * @param history The previous state to retrieve history\n     * @param resolve Whether state nodes should resolve to initial child state nodes\n     */\n    StateNode.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {\n        if (resolve === void 0) { resolve = true; }\n        if (typeof relativeStateId === 'string' && isStateId(relativeStateId)) {\n            var unresolvedStateNode = this.getStateNodeById(relativeStateId);\n            return resolve\n                ? unresolvedStateNode.history\n                    ? unresolvedStateNode.resolveHistory(historyValue)\n                    : unresolvedStateNode.initialStateNodes\n                : [unresolvedStateNode];\n        }\n        var statePath = toStatePath(relativeStateId, this.delimiter);\n        var rootStateNode = this.parent || this;\n        var unresolvedStateNodes = rootStateNode.getFromRelativePath(statePath, historyValue);\n        if (!resolve) {\n            return unresolvedStateNodes;\n        }\n        return flatMap(unresolvedStateNodes.map(function (stateNode) { return stateNode.initialStateNodes; }));\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n        get: function () {\n            var _this = this;\n            // todo - isLeafNode or something\n            if (!this.parallel && !this.initial) {\n                return [this];\n            }\n            var initialState = this.initialState;\n            var initialStateNodePaths = toStatePaths(initialState.value);\n            return flatMap(initialStateNodePaths.map(function (initialPath) {\n                return _this.getFromRelativePath(initialPath);\n            }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Retrieves state nodes from a relative path to this state node.\n     *\n     * @param relativePath The relative path from this state node\n     * @param historyValue\n     */\n    StateNode.prototype.getFromRelativePath = function (relativePath, historyValue) {\n        var _this = this;\n        if (!relativePath.length) {\n            return [this];\n        }\n        var x = relativePath[0], xs = relativePath.slice(1);\n        if (!this.states) {\n            throw new Error(\"Cannot retrieve subPath '\" + x + \"' from node with no states\");\n        }\n        // TODO: remove (4.0)\n        if (x === HISTORY_KEY) {\n            if (!historyValue) {\n                return [this];\n            }\n            var subHistoryValue = nestedPath(this.path, 'states')(historyValue).current;\n            if (typeof subHistoryValue === 'string') {\n                return this.states[subHistoryValue].getFromRelativePath(xs, historyValue);\n            }\n            return flatMap(Object.keys(subHistoryValue).map(function (key) {\n                return _this.states[key].getFromRelativePath(xs, historyValue);\n            }));\n        }\n        var childStateNode = this.getStateNode(x);\n        if (childStateNode.history) {\n            return childStateNode.resolveHistory(historyValue);\n        }\n        if (!this.states[x]) {\n            throw new Error(\"Child state '\" + x + \"' does not exist on '\" + this.id + \"'\");\n        }\n        return this.states[x].getFromRelativePath(xs, historyValue);\n    };\n    StateNode.updateHistoryValue = function (hist, stateValue) {\n        function update(_hist, _sv) {\n            return mapValues(_hist.states, function (subHist, key) {\n                if (!subHist) {\n                    return undefined;\n                }\n                var subStateValue = (typeof _sv === 'string' ? undefined : _sv[key]) ||\n                    (subHist ? subHist.current : undefined);\n                if (!subStateValue) {\n                    return undefined;\n                }\n                return {\n                    current: subStateValue,\n                    states: update(subHist, subStateValue)\n                };\n            });\n        }\n        return {\n            current: stateValue,\n            states: update(hist, stateValue)\n        };\n    };\n    StateNode.prototype.historyValue = function (relativeStateValue) {\n        if (!Object.keys(this.states).length) {\n            return undefined;\n        }\n        return {\n            current: relativeStateValue || this.initialStateValue,\n            states: mapFilterValues(this.states, function (stateNode, key) {\n                if (!relativeStateValue) {\n                    return stateNode.historyValue();\n                }\n                var subStateValue = typeof relativeStateValue === 'string'\n                    ? undefined\n                    : relativeStateValue[key];\n                return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n            }, function (stateNode) { return !stateNode.history; })\n        };\n    };\n    /**\n     * Resolves to the historical value(s) of the parent state node,\n     * represented by state nodes.\n     *\n     * @param historyValue\n     */\n    StateNode.prototype.resolveHistory = function (historyValue) {\n        var _this = this;\n        if (!this.history) {\n            return [this];\n        }\n        var parent = this.parent;\n        if (!historyValue) {\n            return this.target\n                ? flatMap(toStatePaths(this.target).map(function (relativeChildPath) {\n                    return parent.getFromRelativePath(relativeChildPath);\n                }))\n                : this.parent.initialStateNodes;\n        }\n        var subHistoryValue = nestedPath(parent.path, 'states')(historyValue).current;\n        if (typeof subHistoryValue === 'string') {\n            return [parent.getStateNode(subHistoryValue)];\n        }\n        return flatMap(toStatePaths(subHistoryValue).map(function (subStatePath) {\n            return _this.history === 'deep'\n                ? parent.getFromRelativePath(subStatePath)\n                : [parent.states[subStatePath[0]]];\n        }));\n    };\n    Object.defineProperty(StateNode.prototype, \"events\", {\n        get: function () {\n            if (this.__cache.events) {\n                return this.__cache.events;\n            }\n            var states = this.states;\n            var events = new Set(Object.keys(this.on));\n            if (states) {\n                Object.keys(states).forEach(function (stateId) {\n                    var state = states[stateId];\n                    if (state.states) {\n                        for (var _i = 0, _a = state.events; _i < _a.length; _i++) {\n                            var event_1 = _a[_i];\n                            events.add(\"\" + event_1);\n                        }\n                    }\n                });\n            }\n            return (this.__cache.events = Array.from(events));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StateNode.prototype.formatTransition = function (targets, transitionConfig) {\n        var _this = this;\n        var internal = transitionConfig ? transitionConfig.internal : false;\n        // Format targets to their full string path\n        var formattedTargets = targets.map(function (target) {\n            var internalTarget = typeof target === 'string' && target[0] === _this.delimiter;\n            internal = internal || internalTarget;\n            // If internal target is defined on machine,\n            // do not include machine key on target\n            if (internalTarget && !_this.parent) {\n                return target.slice(1);\n            }\n            return internalTarget ? _this.key + target : target;\n        });\n        return __assign({}, transitionConfig, { target: formattedTargets, internal: internal });\n    };\n    StateNode.prototype.formatTransitions = function (onConfig) {\n        var _this = this;\n        return mapValues(onConfig, function (value) {\n            if (value === undefined) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value.map(function (targetTransitionConfig) {\n                    return _this.formatTransition([].concat(targetTransitionConfig.target), targetTransitionConfig);\n                });\n            }\n            if (typeof value === 'string') {\n                return [_this.formatTransition([value])];\n            }\n            return Object.keys(value).map(function (target) {\n                return _this.formatTransition([target], value[target]);\n            });\n        });\n    };\n    return StateNode;\n}());\nexport function Machine(config, options) {\n    return new StateNode(config, options);\n}\nexport { StateNode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/** @license React v0.19.1\n * scheduler-unstable_mock.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    var enableSchedulerDebugging = false;\n    var enableProfiling = true;\n    var currentTime = 0;\n    var scheduledCallback = null;\n    var scheduledTimeout = null;\n    var timeoutTime = -1;\n    var yieldedValues = null;\n    var expectedNumberOfYields = -1;\n    var didStop = false;\n    var isFlushing = false;\n    var needsPaint = false;\n    var shouldYieldForPaint = false;\n\n    function requestHostCallback(callback) {\n      scheduledCallback = callback;\n    }\n\n    function requestHostTimeout(callback, ms) {\n      scheduledTimeout = callback;\n      timeoutTime = currentTime + ms;\n    }\n\n    function cancelHostTimeout() {\n      scheduledTimeout = null;\n      timeoutTime = -1;\n    }\n\n    function shouldYieldToHost() {\n      if (expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n        // We yielded at least as many values as expected. Stop flushing.\n        didStop = true;\n        return true;\n      }\n\n      return false;\n    }\n\n    function getCurrentTime() {\n      return currentTime;\n    }\n\n    function forceFrameRate() {// No-op\n    }\n\n    function unstable_flushNumberOfYields(count) {\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        var cb = scheduledCallback;\n        expectedNumberOfYields = count;\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = true;\n\n          do {\n            hasMoreWork = cb(true, currentTime);\n          } while (hasMoreWork && !didStop);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n        } finally {\n          expectedNumberOfYields = -1;\n          didStop = false;\n          isFlushing = false;\n        }\n      }\n    }\n\n    function unstable_flushUntilNextPaint() {\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        var cb = scheduledCallback;\n        shouldYieldForPaint = true;\n        needsPaint = false;\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = true;\n\n          do {\n            hasMoreWork = cb(true, currentTime);\n          } while (hasMoreWork && !didStop);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n        } finally {\n          shouldYieldForPaint = false;\n          didStop = false;\n          isFlushing = false;\n        }\n      }\n    }\n\n    function unstable_flushExpired() {\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = scheduledCallback(false, currentTime);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n        } finally {\n          isFlushing = false;\n        }\n      }\n    }\n\n    function unstable_flushAllWithoutAsserting() {\n      // Returns false if no work was flushed.\n      if (isFlushing) {\n        throw new Error('Already flushing work.');\n      }\n\n      if (scheduledCallback !== null) {\n        var cb = scheduledCallback;\n        isFlushing = true;\n\n        try {\n          var hasMoreWork = true;\n\n          do {\n            hasMoreWork = cb(true, currentTime);\n          } while (hasMoreWork);\n\n          if (!hasMoreWork) {\n            scheduledCallback = null;\n          }\n\n          return true;\n        } finally {\n          isFlushing = false;\n        }\n      } else {\n        return false;\n      }\n    }\n\n    function unstable_clearYields() {\n      if (yieldedValues === null) {\n        return [];\n      }\n\n      var values = yieldedValues;\n      yieldedValues = null;\n      return values;\n    }\n\n    function unstable_flushAll() {\n      if (yieldedValues !== null) {\n        throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n      }\n\n      unstable_flushAllWithoutAsserting();\n\n      if (yieldedValues !== null) {\n        throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n      }\n    }\n\n    function unstable_yieldValue(value) {\n      if (yieldedValues === null) {\n        yieldedValues = [value];\n      } else {\n        yieldedValues.push(value);\n      }\n    }\n\n    function unstable_advanceTime(ms) {\n      currentTime += ms;\n\n      if (scheduledTimeout !== null && timeoutTime <= currentTime) {\n        scheduledTimeout(currentTime);\n        timeoutTime = -1;\n        scheduledTimeout = null;\n      }\n    }\n\n    function requestPaint() {\n      needsPaint = true;\n    }\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n\n    function pop(heap) {\n      var first = heap[0];\n\n      if (first !== undefined) {\n        var last = heap.pop();\n\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n\n        return first;\n      } else {\n        return null;\n      }\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (true) {\n        var parentIndex = index - 1 >>> 1;\n        var parent = heap[parentIndex];\n\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var NoPriority = 0;\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n    var runIdCounter = 0;\n    var mainThreadIdCounter = 0;\n    var profilingStateSize = 4;\n    var sharedProfilingBuffer = // $FlowFixMe Flow doesn't know about SharedArrayBuffer\n    typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\n    typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n    ;\n    var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\n    var PRIORITY = 0;\n    var CURRENT_TASK_ID = 1;\n    var CURRENT_RUN_ID = 2;\n    var QUEUE_SIZE = 3;\n    {\n      profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n      // array might include canceled tasks.\n\n      profilingState[QUEUE_SIZE] = 0;\n      profilingState[CURRENT_TASK_ID] = 0;\n    } // Bytes per element is 4\n\n    var INITIAL_EVENT_LOG_SIZE = 131072;\n    var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\n    var eventLogSize = 0;\n    var eventLogBuffer = null;\n    var eventLog = null;\n    var eventLogIndex = 0;\n    var TaskStartEvent = 1;\n    var TaskCompleteEvent = 2;\n    var TaskErrorEvent = 3;\n    var TaskCancelEvent = 4;\n    var TaskRunEvent = 5;\n    var TaskYieldEvent = 6;\n    var SchedulerSuspendEvent = 7;\n    var SchedulerResumeEvent = 8;\n\n    function logEvent(entries) {\n      if (eventLog !== null) {\n        var offset = eventLogIndex;\n        eventLogIndex += entries.length;\n\n        if (eventLogIndex + 1 > eventLogSize) {\n          eventLogSize *= 2;\n\n          if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n            // Using console['error'] to evade Babel and ESLint\n            console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n            stopLoggingProfilingEvents();\n            return;\n          }\n\n          var newEventLog = new Int32Array(eventLogSize * 4);\n          newEventLog.set(eventLog);\n          eventLogBuffer = newEventLog.buffer;\n          eventLog = newEventLog;\n        }\n\n        eventLog.set(entries, offset);\n      }\n    }\n\n    function startLoggingProfilingEvents() {\n      eventLogSize = INITIAL_EVENT_LOG_SIZE;\n      eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n      eventLog = new Int32Array(eventLogBuffer);\n      eventLogIndex = 0;\n    }\n\n    function stopLoggingProfilingEvents() {\n      var buffer = eventLogBuffer;\n      eventLogSize = 0;\n      eventLogBuffer = null;\n      eventLog = null;\n      eventLogIndex = 0;\n      return buffer;\n    }\n\n    function markTaskStart(task, ms) {\n      {\n        profilingState[QUEUE_SIZE]++;\n\n        if (eventLog !== null) {\n          // performance.now returns a float, representing milliseconds. When the\n          // event is logged, it's coerced to an int. Convert to microseconds to\n          // maintain extra degrees of precision.\n          logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n        }\n      }\n    }\n\n    function markTaskCompleted(task, ms) {\n      {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskCanceled(task, ms) {\n      {\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskCancelEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskErrored(task, ms) {\n      {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskErrorEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskRun(task, ms) {\n      {\n        runIdCounter++;\n        profilingState[PRIORITY] = task.priorityLevel;\n        profilingState[CURRENT_TASK_ID] = task.id;\n        profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n        if (eventLog !== null) {\n          logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n\n    function markTaskYield(task, ms) {\n      {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[CURRENT_RUN_ID] = 0;\n\n        if (eventLog !== null) {\n          logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n\n    function markSchedulerSuspended(ms) {\n      {\n        mainThreadIdCounter++;\n\n        if (eventLog !== null) {\n          logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n\n    function markSchedulerUnsuspended(ms) {\n      {\n        if (eventLog !== null) {\n          logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n          {\n            markTaskStart(timer, currentTime);\n            timer.isQueued = true;\n          }\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      {\n        markSchedulerUnsuspended(initialTime);\n      } // We'll need a host callback the next time work is scheduled.\n\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = getCurrentTime();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod codepath.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n        {\n          var _currentTime = getCurrentTime();\n\n          markSchedulerSuspended(_currentTime);\n        }\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !enableSchedulerDebugging) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (callback !== null) {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          markTaskRun(currentTask, currentTime);\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = getCurrentTime();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n            markTaskYield(currentTask, currentTime);\n          } else {\n            {\n              markTaskCompleted(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function timeoutForPriorityLevel(priorityLevel) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          return IMMEDIATE_PRIORITY_TIMEOUT;\n\n        case UserBlockingPriority:\n          return USER_BLOCKING_PRIORITY;\n\n        case IdlePriority:\n          return IDLE_PRIORITY;\n\n        case LowPriority:\n          return LOW_PRIORITY_TIMEOUT;\n\n        case NormalPriority:\n        default:\n          return NORMAL_PRIORITY_TIMEOUT;\n      }\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = getCurrentTime();\n      var startTime;\n      var timeout;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n\n        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n      } else {\n        timeout = timeoutForPriorityLevel(priorityLevel);\n        startTime = currentTime;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n      {\n        newTask.isQueued = false;\n      }\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask);\n        {\n          markTaskStart(newTask, currentTime);\n          newTask.isQueued = true;\n        } // Schedule a host callback, if needed. If we're already performing work,\n        // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {}\n\n    function unstable_continueExecution() {\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      {\n        if (task.isQueued) {\n          var currentTime = getCurrentTime();\n          markTaskCanceled(task, currentTime);\n          task.isQueued = false;\n        }\n      } // Null out the callback to indicate the task has been canceled. (Can't\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      var currentTime = getCurrentTime();\n      advanceTimers(currentTime);\n      var firstTask = peek(taskQueue);\n      return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n    }\n\n    var unstable_requestPaint = requestPaint;\n    var unstable_Profiling = {\n      startLoggingProfilingEvents: startLoggingProfilingEvents,\n      stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n      sharedProfilingBuffer: sharedProfilingBuffer\n    };\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_Profiling = unstable_Profiling;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_advanceTime = unstable_advanceTime;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_clearYields = unstable_clearYields;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_flushAll = unstable_flushAll;\n    exports.unstable_flushAllWithoutAsserting = unstable_flushAllWithoutAsserting;\n    exports.unstable_flushExpired = unstable_flushExpired;\n    exports.unstable_flushNumberOfYields = unstable_flushNumberOfYields;\n    exports.unstable_flushUntilNextPaint = unstable_flushUntilNextPaint;\n    exports.unstable_forceFrameRate = forceFrameRate;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_next = unstable_next;\n    exports.unstable_now = getCurrentTime;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_yieldValue = unstable_yieldValue;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","enableSchedulerDebugging","enableProfiling","currentTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","requestHostCallback","callback","requestHostTimeout","ms","cancelHostTimeout","shouldYieldToHost","length","getCurrentTime","forceFrameRate","unstable_flushNumberOfYields","count","Error","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearYields","values","unstable_flushAll","unstable_yieldValue","value","push","unstable_advanceTime","requestPaint","heap","node","index","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","NoPriority","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","runIdCounter","mainThreadIdCounter","profilingStateSize","sharedProfilingBuffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","ArrayBuffer","profilingState","PRIORITY","CURRENT_TASK_ID","CURRENT_RUN_ID","QUEUE_SIZE","INITIAL_EVENT_LOG_SIZE","MAX_EVENT_LOG_SIZE","eventLogSize","eventLogBuffer","eventLog","eventLogIndex","TaskStartEvent","TaskCompleteEvent","TaskErrorEvent","TaskCancelEvent","TaskRunEvent","TaskYieldEvent","SchedulerSuspendEvent","SchedulerResumeEvent","logEvent","entries","offset","console","stopLoggingProfilingEvents","newEventLog","set","buffer","startLoggingProfilingEvents","markTaskStart","task","priorityLevel","markTaskCompleted","markTaskCanceled","markTaskErrored","markTaskRun","markTaskYield","markSchedulerSuspended","markSchedulerUnsuspended","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","isQueued","handleTimeout","flushWork","firstTimer","hasTimeRemaining","initialTime","previousPriorityLevel","workLoop","error","_currentTime","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","timeoutForPriorityLevel","unstable_scheduleCallback","options","timeout","delay","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_shouldYield","firstTask","unstable_requestPaint","unstable_Profiling","exports","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_UserBlockingPriority","unstable_forceFrameRate","unstable_now"],"sources":["/Users/deviambar/Documents/simpleapp/frontend/node_modules/react-automata/node_modules/scheduler/cjs/scheduler-unstable_mock.development.js"],"sourcesContent":["/** @license React v0.19.1\n * scheduler-unstable_mock.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nvar enableSchedulerDebugging = false;\nvar enableProfiling = true;\n\nvar currentTime = 0;\nvar scheduledCallback = null;\nvar scheduledTimeout = null;\nvar timeoutTime = -1;\nvar yieldedValues = null;\nvar expectedNumberOfYields = -1;\nvar didStop = false;\nvar isFlushing = false;\nvar needsPaint = false;\nvar shouldYieldForPaint = false;\nfunction requestHostCallback(callback) {\n  scheduledCallback = callback;\n}\nfunction requestHostTimeout(callback, ms) {\n  scheduledTimeout = callback;\n  timeoutTime = currentTime + ms;\n}\nfunction cancelHostTimeout() {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\nfunction shouldYieldToHost() {\n  if (expectedNumberOfYields !== -1 && yieldedValues !== null && yieldedValues.length >= expectedNumberOfYields || shouldYieldForPaint && needsPaint) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n\n  return false;\n}\nfunction getCurrentTime() {\n  return currentTime;\n}\nfunction forceFrameRate() {// No-op\n}\n\nfunction unstable_flushNumberOfYields(count) {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    var cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentTime);\n      } while (hasMoreWork && !didStop);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\nfunction unstable_flushUntilNextPaint() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    var cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentTime);\n      } while (hasMoreWork && !didStop);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\nfunction unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = scheduledCallback(false, currentTime);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\nfunction unstable_flushAllWithoutAsserting() {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n\n  if (scheduledCallback !== null) {\n    var cb = scheduledCallback;\n    isFlushing = true;\n\n    try {\n      var hasMoreWork = true;\n\n      do {\n        hasMoreWork = cb(true, currentTime);\n      } while (hasMoreWork);\n\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\nfunction unstable_clearYields() {\n  if (yieldedValues === null) {\n    return [];\n  }\n\n  var values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\nfunction unstable_flushAll() {\n  if (yieldedValues !== null) {\n    throw new Error('Log is not empty. Assert on the log of yielded values before ' + 'flushing additional work.');\n  }\n\n  unstable_flushAllWithoutAsserting();\n\n  if (yieldedValues !== null) {\n    throw new Error('While flushing work, something yielded a value. Use an ' + 'assertion helper to assert on the log of yielded values, e.g. ' + 'expect(Scheduler).toFlushAndYield([...])');\n  }\n}\nfunction unstable_yieldValue(value) {\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\nfunction unstable_advanceTime(ms) {\n  currentTime += ms;\n\n  if (scheduledTimeout !== null && timeoutTime <= currentTime) {\n    scheduledTimeout(currentTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\nfunction requestPaint() {\n  needsPaint = true;\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = index - 1 >>> 1;\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar NoPriority = 0;\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nvar runIdCounter = 0;\nvar mainThreadIdCounter = 0;\nvar profilingStateSize = 4;\nvar sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n;\nvar profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\nvar PRIORITY = 0;\nvar CURRENT_TASK_ID = 1;\nvar CURRENT_RUN_ID = 2;\nvar QUEUE_SIZE = 3;\n\n{\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n  // array might include canceled tasks.\n\n  profilingState[QUEUE_SIZE] = 0;\n  profilingState[CURRENT_TASK_ID] = 0;\n} // Bytes per element is 4\n\n\nvar INITIAL_EVENT_LOG_SIZE = 131072;\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nvar eventLogSize = 0;\nvar eventLogBuffer = null;\nvar eventLog = null;\nvar eventLogIndex = 0;\nvar TaskStartEvent = 1;\nvar TaskCompleteEvent = 2;\nvar TaskErrorEvent = 3;\nvar TaskCancelEvent = 4;\nvar TaskRunEvent = 5;\nvar TaskYieldEvent = 6;\nvar SchedulerSuspendEvent = 7;\nvar SchedulerResumeEvent = 8;\n\nfunction logEvent(entries) {\n  if (eventLog !== null) {\n    var offset = eventLogIndex;\n    eventLogIndex += entries.length;\n\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n        stopLoggingProfilingEvents();\n        return;\n      }\n\n      var newEventLog = new Int32Array(eventLogSize * 4);\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n\n    eventLog.set(entries, offset);\n  }\n}\n\nfunction startLoggingProfilingEvents() {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\nfunction stopLoggingProfilingEvents() {\n  var buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\nfunction markTaskStart(task, ms) {\n  {\n    profilingState[QUEUE_SIZE]++;\n\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\nfunction markTaskCompleted(task, ms) {\n  {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskCanceled(task, ms) {\n  {\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskErrored(task, ms) {\n  {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskRun(task, ms) {\n  {\n    runIdCounter++;\n    profilingState[PRIORITY] = task.priorityLevel;\n    profilingState[CURRENT_TASK_ID] = task.id;\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markTaskYield(task, ms) {\n  {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[CURRENT_RUN_ID] = 0;\n\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markSchedulerSuspended(ms) {\n  {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\nfunction markSchedulerUnsuspended(ms) {\n  {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = getCurrentTime();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod codepath.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    {\n      var _currentTime = getCurrentTime();\n\n      markSchedulerSuspended(_currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging )) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (callback !== null) {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      markTaskRun(currentTask, currentTime);\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n        markTaskYield(currentTask, currentTime);\n      } else {\n        {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction timeoutForPriorityLevel(priorityLevel) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      return IMMEDIATE_PRIORITY_TIMEOUT;\n\n    case UserBlockingPriority:\n      return USER_BLOCKING_PRIORITY;\n\n    case IdlePriority:\n      return IDLE_PRIORITY;\n\n    case LowPriority:\n      return LOW_PRIORITY_TIMEOUT;\n\n    case NormalPriority:\n    default:\n      return NORMAL_PRIORITY_TIMEOUT;\n  }\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = getCurrentTime();\n  var startTime;\n  var timeout;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n  } else {\n    timeout = timeoutForPriorityLevel(priorityLevel);\n    startTime = currentTime;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n}\n\nfunction unstable_continueExecution() {\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  {\n    if (task.isQueued) {\n      var currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction unstable_shouldYield() {\n  var currentTime = getCurrentTime();\n  advanceTimers(currentTime);\n  var firstTask = peek(taskQueue);\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling =  {\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n  sharedProfilingBuffer: sharedProfilingBuffer\n} ;\n\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_Profiling = unstable_Profiling;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_advanceTime = unstable_advanceTime;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_clearYields = unstable_clearYields;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_flushAll = unstable_flushAll;\nexports.unstable_flushAllWithoutAsserting = unstable_flushAllWithoutAsserting;\nexports.unstable_flushExpired = unstable_flushExpired;\nexports.unstable_flushNumberOfYields = unstable_flushNumberOfYields;\nexports.unstable_flushUntilNextPaint = unstable_flushUntilNextPaint;\nexports.unstable_forceFrameRate = forceFrameRate;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_next = unstable_next;\nexports.unstable_now = getCurrentTime;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_shouldYield = unstable_shouldYield;\nexports.unstable_wrapCallback = unstable_wrapCallback;\nexports.unstable_yieldValue = unstable_yieldValue;\n  })();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}